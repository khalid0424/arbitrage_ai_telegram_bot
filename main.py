
import telebot
import requests
import json
from telebot import types
import time
from datetime import datetime
import threading
from secret import BOT_TOKEN
BINANCE_API = "https://api.binance.com/api/v3/ticker/price"
KUCOIN_API = "https://api.kucoin.com/api/v1/market/allTickers"
HUOBI_API = "https://api.huobi.pro/market/tickers"
MEXC_API = "https://api.mexc.com/api/v3/ticker/price"


bot = telebot.TeleBot(BOT_TOKEN)

price_cache = {}
last_update = 0
UPDATE_INTERVAL = 60 

def get_binance_prices():
    """–ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –Ω–∞—Ä—Ö“≥–æ –∞–∑ Binance"""
    try:
        response = requests.get(BINANCE_API)
        if response.status_code == 200:
            data = response.json()
            return {item['symbol']: float(item['price']) for item in data}
        return {}
    except Exception as e:
        print(f"–•–∞—Ç–æ–≥”£ –¥–∞—Ä Binance API: {e}")
        return {}

def get_kucoin_prices():
    """–ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –Ω–∞—Ä—Ö“≥–æ –∞–∑ KuCoin"""
    try:
        response = requests.get(KUCOIN_API)
        if response.status_code == 200:
            data = response.json().get('data', {}).get('ticker', [])
            prices = {}
            for item in data:
                symbol = item.get('symbol', '').replace('-', '')
                price = item.get('last')  
                if symbol and price:  
                    try:
                        prices[symbol] = float(price)
                    except (ValueError, TypeError):
                        print(f"–•–∞—Ç–æ–≥”£ –¥–∞—Ä —Ç–∞–±–¥–∏–ª–∏ –Ω–∞—Ä—Ö–∏ {symbol}: {price}")
            return prices
        return {}
    except Exception as e:
        print(f"–•–∞—Ç–æ–≥”£ –¥–∞—Ä KuCoin API: {e}")
        return {}


def get_huobi_prices():
    """–ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –Ω–∞—Ä—Ö“≥–æ –∞–∑ Huobi"""
    try:
        response = requests.get(HUOBI_API)
        if response.status_code == 200:
            data = response.json()['data']
            return {item['symbol'].upper(): float(item['close']) for item in data}
        return {}
    except Exception as e:
        print(f"–•–∞—Ç–æ–≥”£ –¥–∞—Ä Huobi API: {e}")
        return {}

def get_mexc_prices():
    """–ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –Ω–∞—Ä—Ö“≥–æ –∞–∑ MEXC"""
    try:
        response = requests.get(MEXC_API)
        if response.status_code == 200:
            data = response.json()
            return {item['symbol']: float(item['price']) for item in data}
        return {}
    except Exception as e:
        print(f"–•–∞—Ç–æ–≥”£ –¥–∞—Ä MEXC API: {e}")
        return {}

def update_prices():
    """–ù–∞–≤—Å–æ–∑–∏–∏ –Ω–∞—Ä—Ö“≥–æ –¥–∞—Ä –∫—ç—à"""
    global price_cache, last_update
    current_time = time.time()
    
    if current_time - last_update < UPDATE_INTERVAL:
        return
    
    price_cache = {
        'binance': get_binance_prices(),
        'kucoin': get_kucoin_prices(),
        'huobi': get_huobi_prices(),
        'mexc': get_mexc_prices()
    }
    last_update = current_time

def format_price(price):
    """–§–æ—Ä–º–∞—Ç–∫—É–Ω–∏–∏ –Ω–∞—Ä—Ö"""
    if price >= 1000:
        return f"{price:,.2f}"
    elif price >= 1:
        return f"{price:.2f}"
    else:
        return f"{price:.8f}"

def find_arbitrage_opportunities():
    """–Å—Ñ—Ç–∞–Ω–∏ –∏–º–∫–æ–Ω–∏—è—Ç“≥–æ–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂"""
    opportunities = []
    common_pairs = set()
    
    
    for exchange in price_cache.values():
        common_pairs.update(exchange.keys())
    
    for pair in common_pairs:
        prices = {}
        for exchange, exchange_prices in price_cache.items():
            if pair in exchange_prices:
                prices[exchange] = exchange_prices[pair]
        
        if len(prices) >= 2:
            min_exchange = min(prices.items(), key=lambda x: x[1])
            max_exchange = max(prices.items(), key=lambda x: x[1])
            price_diff = ((max_exchange[1] - min_exchange[1]) / min_exchange[1]) * 100
            
            if price_diff > 1:  
                opportunities.append({
                    'pair': pair,
                    'buy_exchange': min_exchange[0],
                    'buy_price': min_exchange[1],
                    'sell_exchange': max_exchange[0],
                    'sell_price': max_exchange[1],
                    'difference': price_diff
                })
    
    return sorted(opportunities, key=lambda x: x['difference'], reverse=True)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üí∞ –ù–∞—Ä—Ö“≥–æ', 'üìä –ú—É“õ–æ–∏—Å–∞')
    markup.row('üíπ –ê—Ä–±–∏—Ç—Ä–∞–∂', '‚ùì –Å—Ä–¥–∞–º')
    
    welcome_text = """
–°–∞–ª–æ–º! –ú–∞–Ω –±–æ—Ç–∏ –º—É“õ–æ–∏—Å–∞–∏ –Ω–∞—Ä—Ö“≥–æ–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ “≥–∞—Å—Ç–∞–º.

–ê–º—Ä“≥–æ–∏ –¥–∞—Å—Ç—Ä–∞—Å:
/price <symbol> - –ù–∞—Ä—Ö–∏ —è–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–∏ –º—É—à–∞—Ö—Ö–∞—Å
/compare <symbol> - –ú—É“õ–æ–∏—Å–∞–∏ –Ω–∞—Ä—Ö“≥–æ –¥–∞—Ä –±–∏—Ä–∂–∞“≥–æ–∏ –≥—É–Ω–æ–≥—É–Ω
/arbitrage - –Å—Ñ—Ç–∞–Ω–∏ –∏–º–∫–æ–Ω–∏—è—Ç“≥–æ–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂
/top - 10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–∏ –±–µ“≥—Ç–∞—Ä–∏–Ω

–®—É–º–æ –∏–Ω—á—É–Ω–∏–Ω –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –∞–∑ —Ç—É–≥–º–∞“≥–æ–∏ –∑–µ—Ä –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥ üëá
    """
    bot.reply_to(message, welcome_text, reply_markup=markup)

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
–†–æ“≥–Ω–∞–º–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –±–æ—Ç:

1. –ë–∞—Ä–æ–∏ –¥–∏–¥–∞–Ω–∏ –Ω–∞—Ä—Ö–∏ —è–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:
   /price BTC - –Ω–∞—Ä—Ö–∏ Bitcoin
   /price ETH - –Ω–∞—Ä—Ö–∏ Ethereum

2. –ë–∞—Ä–æ–∏ –º—É“õ–æ–∏—Å–∞–∏ –Ω–∞—Ä—Ö“≥–æ:
   /compare BTC - –º—É“õ–æ–∏—Å–∞–∏ –Ω–∞—Ä—Ö–∏ Bitcoin –¥–∞—Ä “≥–∞–º–∞ –±–∏—Ä–∂–∞“≥–æ
   
3. –ë–∞—Ä–æ–∏ –¥–∏–¥–∞–Ω–∏ –∏–º–∫–æ–Ω–∏—è—Ç“≥–æ–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂:
   /arbitrage - –Ω–∏—à–æ–Ω –¥–æ–¥–∞–Ω–∏ –±–µ“≥—Ç–∞—Ä–∏–Ω –∏–º–∫–æ–Ω–∏—è—Ç“≥–æ

4. –ë–∞—Ä–æ–∏ –¥–∏–¥–∞–Ω–∏ TOP-10:
   /top - –Ω–∏—à–æ–Ω –¥–æ–¥–∞–Ω–∏ 10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–∏ –±–µ“≥—Ç–∞—Ä–∏–Ω

–ù–∞—Ä—Ö“≥–æ “≥–∞—Ä 60 —Å–æ–Ω–∏—è –Ω–∞–≤ –º–µ—à–∞–≤–∞–Ω–¥.
    """
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['price'])
def send_price(message):
    try:
        symbol = message.text.split()[1].upper()
        update_prices()
        
        response = "–ù–∞—Ä—Ö–∏ " + symbol + ":\n\n"
        for exchange, prices in price_cache.items():
            if symbol in prices:
                response += f"{exchange.capitalize()}: ${format_price(prices[symbol])}\n"
        
        if response == f"–ù–∞—Ä—Ö–∏ {symbol}:\n\n":
            response = f"–ë–∞—Ö—à–∏—à, –±–∞—Ä–æ–∏ {symbol} –Ω–∞—Ä—Ö —ë—Ñ—Ç –Ω–∞—à—É–¥."
            
        bot.reply_to(message, response)
    except IndexError:
        bot.reply_to(message, "–õ—É—Ç—Ñ–∞–Ω —Å–∏–º–≤–æ–ª—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥. –ú–∞—Å–∞–ª–∞–Ω: /price BTC")

@bot.message_handler(commands=['compare'])
def compare_prices(message):
    try:
        symbol = message.text.split()[1].upper()
        update_prices()
        
        prices = []
        for exchange, exchange_prices in price_cache.items():
            if symbol in exchange_prices:
                prices.append((exchange, exchange_prices[symbol]))
        
        if not prices:
            bot.reply_to(message, f"–ë–∞—Ö—à–∏—à, –±–∞—Ä–æ–∏ {symbol} –Ω–∞—Ä—Ö —ë—Ñ—Ç –Ω–∞—à—É–¥.")
            return
            
        prices.sort(key=lambda x: x[1])
        
        response = f"–ú—É“õ–æ–∏—Å–∞–∏ –Ω–∞—Ä—Ö“≥–æ –±–∞—Ä–æ–∏ {symbol}:\n\n"
        for exchange, price in prices:
            response += f"{exchange.capitalize()}: ${format_price(price)}\n"
        
        min_price = prices[0][1]
        max_price = prices[-1][1]
        diff_percent = ((max_price - min_price) / min_price) * 100
        
        response += f"\n–§–∞—Ä“õ–∏ –Ω–∞—Ä—Ö: {diff_percent:.2f}%"
        
        bot.reply_to(message, response)
    except IndexError:
        bot.reply_to(message, "–õ—É—Ç—Ñ–∞–Ω —Å–∏–º–≤–æ–ª—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥. –ú–∞—Å–∞–ª–∞–Ω: /compare BTC")

@bot.message_handler(commands=['arbitrage'])
def show_arbitrage(message):
    update_prices()
    opportunities = find_arbitrage_opportunities()
    
    if not opportunities:
        bot.reply_to(message, "–î–∞—Ä –∞–π–Ω–∏ “≥–æ–ª –∏–º–∫–æ–Ω–∏—è—Ç“≥–æ–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂ —ë—Ñ—Ç –Ω–∞—à—É–¥–∞–Ω–¥.")
        return
    
    response = "üîÑ –ò–º–∫–æ–Ω–∏—è—Ç“≥–æ–∏ –±–µ“≥—Ç–∞—Ä–∏–Ω–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂:\n\n"
    for opp in opportunities[:5]:
        response += f"üí† {opp['pair']}\n"
        response += f"–•–∞—Ä–∏–¥: {opp['buy_exchange'].capitalize()} - ${format_price(opp['buy_price'])}\n"
        response += f"–§—É—Ä”Ø—à: {opp['sell_exchange'].capitalize()} - ${format_price(opp['sell_price'])}\n"
        response += f"–§–∞—Ä“õ: {opp['difference']:.2f}%\n\n"
    
    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text in ['üí∞ –ù–∞—Ä—Ö“≥–æ', 'üìä –ú—É“õ–æ–∏—Å–∞', 'üíπ –ê—Ä–±–∏—Ç—Ä–∞–∂', '‚ùì –Å—Ä–¥–∞–º'])
def handle_buttons(message):
    if message.text == 'üí∞ –ù–∞—Ä—Ö“≥–æ':
        bot.reply_to(message, "–õ—É—Ç—Ñ–∞–Ω –∞–º—Ä–∏ /price <symbol> -—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥. –ú–∞—Å–∞–ª–∞–Ω: /price BTC")
    elif message.text == 'üìä –ú—É“õ–æ–∏—Å–∞':
        bot.reply_to(message, "–õ—É—Ç—Ñ–∞–Ω –∞–º—Ä–∏ /compare <symbol> -—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥. –ú–∞—Å–∞–ª–∞–Ω: /compare BTC")
    elif message.text == 'üíπ –ê—Ä–±–∏—Ç—Ä–∞–∂':
        show_arbitrage(message)
    elif message.text == '‚ùì –Å—Ä–¥–∞–º':
        send_help(message)

def main():
    """–§—É–Ω–∫—Å–∏—è–∏ –∞—Å–æ—Å”£"""
    try:
        print("–ë–æ—Ç –æ“ì–æ–∑ —à—É–¥...")
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–•–∞—Ç–æ–≥”£ —Ä”Ø–π –¥–æ–¥: {e}")
        time.sleep(15)
        main()

if __name__ == "__main__":
    main()